{"id":"node_modules/onnxruntime-common/dist/lib/backend.js","dependencies":[{"name":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/node_modules/onnxruntime-common/dist/lib/backend.js.map","includedInParent":true,"mtime":1643466985092},{"name":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/node_modules/onnxruntime-common/lib/backend.ts","includedInParent":true,"mtime":1643466985105},{"name":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/package.json","includedInParent":true,"mtime":1643466985826},{"name":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/node_modules/onnxruntime-common/package.json","includedInParent":true,"mtime":1643466985091},{"name":"./backend-impl","loc":{"line":3,"column":32},"parent":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/node_modules/onnxruntime-common/dist/lib/backend.js","resolved":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/node_modules/onnxruntime-common/dist/lib/backend-impl.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"registerBackend\", {\n  enumerable: true,\n  get: function () {\n    return _backendImpl.registerBackend;\n  }\n});\n\nvar _backendImpl = require(\"./backend-impl\");"},"sourceMaps":{"js":{"mappings":[{"source":"../../lib/backend.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":13,"column":0}}],"sources":{"../../lib/backend.ts":"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from './inference-session';\r\nimport {OnnxValue} from './onnx-value';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport declare namespace SessionHandler {\r\n  type FeedsType = {[name: string]: OnnxValue};\r\n  type FetchesType = {[name: string]: OnnxValue | null};\r\n  type ReturnType = {[name: string]: OnnxValue};\r\n}\r\n\r\n/**\r\n * Represent a handler instance of an inference session.\r\n *\r\n * @internal\r\n */\r\nexport interface SessionHandler {\r\n  dispose(): Promise<void>;\r\n\r\n  readonly inputNames: readonly string[];\r\n  readonly outputNames: readonly string[];\r\n\r\n  startProfiling(): void;\r\n  endProfiling(): void;\r\n\r\n  run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType,\r\n      options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType>;\r\n}\r\n\r\n/**\r\n * Represent a backend that provides implementation of model inferencing.\r\n *\r\n * @internal\r\n */\r\nexport interface Backend {\r\n  /**\r\n   * Initialize the backend asynchronously. Should throw when failed.\r\n   */\r\n  init(): Promise<void>;\r\n\r\n  createSessionHandler(uriOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler>;\r\n}\r\n\r\nexport {registerBackend} from './backend-impl';\r\n"},"lineCount":null}},"error":null,"hash":"34eec79229392f01316f81511a30b186","cacheData":{"env":{}}}