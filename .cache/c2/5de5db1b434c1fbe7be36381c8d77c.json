{"id":"node_modules/onnxruntime-common/dist/lib/env.js","dependencies":[{"name":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/node_modules/onnxruntime-common/dist/lib/env.js.map","includedInParent":true,"mtime":1643466985092},{"name":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/node_modules/onnxruntime-common/lib/env.ts","includedInParent":true,"mtime":1643466985107},{"name":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/package.json","includedInParent":true,"mtime":1643466985826},{"name":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/node_modules/onnxruntime-common/package.json","includedInParent":true,"mtime":1643466985091},{"name":"./env-impl","loc":{"line":3,"column":24},"parent":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/node_modules/onnxruntime-common/dist/lib/env.js","resolved":"/Users/dominikkoller/Documents/GitHub/autoencoder_tests/node_modules/onnxruntime-common/dist/lib/env-impl.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.env = void 0;\n\nvar _envImpl = require(\"./env-impl\");\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\r\n * Represent a set of flags as a global singleton.\r\n */\nconst env = new _envImpl.EnvImpl();\nexports.env = env;"},"sourceMaps":{"js":{"mappings":[{"source":"../../lib/env.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":8,"column":0}},{"source":"../../lib/env.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../lib/env.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":11,"column":0}},{"source":"../../lib/env.ts","name":null,"original":{"line":115,"column":0},"generated":{"line":13,"column":0}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":7},"generated":{"line":16,"column":0}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":13},"generated":{"line":16,"column":6}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":16},"generated":{"line":16,"column":9}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":24},"generated":{"line":16,"column":12}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":28},"generated":{"line":16,"column":16}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":24},"generated":{"line":16,"column":32}},{"source":"../../lib/env.ts","name":null,"original":{"line":118,"column":7},"generated":{"line":16,"column":34}}],"sources":{"../../lib/env.ts":"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {EnvImpl} from './env-impl';\r\nexport declare namespace Env {\r\n  export type WasmPrefixOrFilePaths = string|{\r\n    'ort-wasm.wasm'?: string;\r\n    'ort-wasm-threaded.wasm'?: string;\r\n    'ort-wasm-simd.wasm'?: string;\r\n    'ort-wasm-simd-threaded.wasm'?: string;\r\n  };\r\n  export interface WebAssemblyFlags {\r\n    /**\r\n     * set or get number of thread(s). If omitted or set to 0, number of thread(s) will be determined by system. If set\r\n     * to 1, no worker thread will be spawned.\r\n     *\r\n     * This setting is available only when WebAssembly multithread feature is available in current context.\r\n     *\r\n     * @defaultValue `0`\r\n     */\r\n    numThreads?: number;\r\n\r\n    /**\r\n     * set or get a boolean value indicating whether to enable SIMD. If set to false, SIMD will be forcely disabled.\r\n     *\r\n     * This setting is available only when WebAssembly SIMD feature is available in current context.\r\n     *\r\n     * @defaultValue `true`\r\n     */\r\n    simd?: boolean;\r\n\r\n    /**\r\n     * Set or get a number specifying the timeout for initialization of WebAssembly backend, in milliseconds. A zero\r\n     * value indicates no timeout is set.\r\n     *\r\n     * @defaultValue `0`\r\n     */\r\n    initTimeout?: number;\r\n\r\n    /**\r\n     * Set a custom URL prefix to the .wasm files or a set of overrides for each .wasm file. The override path should be\r\n     * an absolute path.\r\n     */\r\n    wasmPaths?: WasmPrefixOrFilePaths;\r\n\r\n    /**\r\n     * Set or get a boolean value indicating whether to proxy the execution of main thread to a worker thread.\r\n     *\r\n     * @defaultValue `false`\r\n     */\r\n    proxy?: boolean;\r\n  }\r\n\r\n  export interface WebGLFlags {\r\n    /**\r\n     * Set or get the WebGL Context ID (webgl or webgl2).\r\n     *\r\n     * @defaultValue `'webgl2'`\r\n     */\r\n    contextId?: 'webgl'|'webgl2';\r\n    /**\r\n     * Set or get the maximum batch size for matmul. 0 means to disable batching.\r\n     *\r\n     * @deprecated\r\n     */\r\n    matmulMaxBatchSize?: number;\r\n    /**\r\n     * Set or get the texture cache mode.\r\n     *\r\n     * @defaultValue `'full'`\r\n     */\r\n    textureCacheMode?: 'initializerOnly'|'full';\r\n    /**\r\n     * Set or get the packed texture mode\r\n     *\r\n     * @defaultValue `false`\r\n     */\r\n    pack?: boolean;\r\n    /**\r\n     * Set or get whether enable async download.\r\n     *\r\n     * @defaultValue `false`\r\n     */\r\n    async?: boolean;\r\n  }\r\n}\r\n\r\nexport interface Env {\r\n  /**\r\n   * set the severity level for logging.\r\n   *\r\n   * @defaultValue `'warning'`\r\n   */\r\n  logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal';\r\n  /**\r\n   * Indicate whether run in debug mode.\r\n   *\r\n   * @defaultValue `false`\r\n   */\r\n  debug?: boolean;\r\n\r\n  /**\r\n   * Represent a set of flags for WebAssembly\r\n   */\r\n  wasm: Env.WebAssemblyFlags;\r\n\r\n  /**\r\n   * Represent a set of flags for WebGL\r\n   */\r\n  webgl: Env.WebGLFlags;\r\n\r\n  [name: string]: unknown;\r\n}\r\n\r\n/**\r\n * Represent a set of flags as a global singleton.\r\n */\r\nexport const env: Env = new EnvImpl();\r\n"},"lineCount":null}},"error":null,"hash":"2aa026d2cbf4a80462deb8ae69a17bf1","cacheData":{"env":{}}}